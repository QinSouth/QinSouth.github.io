<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>QinSouth的博客</title>
  
  
  <link href="http://www.qinsouth.cn/atom.xml" rel="self"/>
  
  <link href="http://www.qinsouth.cn/"/>
  <updated>2020-09-26T17:10:22.000Z</updated>
  <id>http://www.qinsouth.cn/</id>
  
  <author>
    <name>QinSouth·秦南</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo博客搭建及搭配Next主题简单个性化教程</title>
    <link href="http://www.qinsouth.cn/2020/09/23/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8F%8A%E6%90%AD%E9%85%8DNext%E4%B8%BB%E9%A2%98%E7%AE%80%E5%8D%95%E4%B8%AA%E6%80%A7%E5%8C%96%E6%95%99%E7%A8%8B/"/>
    <id>http://www.qinsouth.cn/2020/09/23/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8F%8A%E6%90%AD%E9%85%8DNext%E4%B8%BB%E9%A2%98%E7%AE%80%E5%8D%95%E4%B8%AA%E6%80%A7%E5%8C%96%E6%95%99%E7%A8%8B/</id>
    <published>2020-09-23T13:07:31.000Z</published>
    <updated>2020-09-26T17:10:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo是基于JavaScript的静态博客框架，是当下最流行的博客框架之一。Hexo有非常大的用户群体，其本身的插件和主题资源也非常丰富，同时作为静态博客也比较轻量、好上手、功能也简单一些。<br>我个人认为使用Hexo是初试博客搭建的最好选择。</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>实践是检验真理的唯一标准</strong>。感谢你的观看！希望本篇文章对你搭建Hexo博客及搭配Next主题的简单个性化有所帮助。<br>2020年8月底开始学习并搭建个人博客，刚开始主要在B站up主<a href="https://space.bilibili.com/384068749/video" title="CodeSheep">CodeSheep</a>的视频学习（在其早期的视频里），他主要传递的是搭建个人博客以及坚持写博客总结归纳自己的技术面等的重要性，我个人也早有打算为自己搭建个人博客。<br>2020年9月6日起正式开始，使用Hexo博客框架开始搭建，而搭配Next主题及其简单美化、添加辅助性小插件等，来源于学习其他优质个人博客网站效果及百度搜索个性化教程。<br>大多数教程有一定时间，与当下搭建个人博客版本不符，需要同时自行解读主题配置文件。本片文章内容所囊括的大多数功能是结合Next的主题配置文件完成的，没有那么繁琐。<br>搭建个人博客不止Hexo框架，还有其他众多可选的框架，请至本文 <a href="#else">搭建个人博客的其他选择</a> 处观看</p><h1 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h1><p>• Hexo版本：v5.1.1（2020年8月23日发布）（<a href="https://space.bilibili.com/384068749/video" title="官方文档">官方文档</a>）（<a href="https://github.com/hexojs/hexo" title="GitHub仓库">GitHub仓库</a>）<br>• Next版本：v7.8.0（2020年4月1日发布）（<a href="https://github.com/theme-next/hexo-theme-next" title="GitHub仓库">GitHub仓库</a>）<br>• Hexo（2020年9月15日发布5.2.0，差别不大不影响以下配置，详情可看Hexo的<a href="https://github.com/hexojs/hexo/releases" title="GitHub版本说明">GitHub版本说明</a>）<br>• Next主题有一个老版本的官方文档，可能是我没找到新版本的官方文档站，但我个人网站里部分功能也是参照这里的配置来的，对我有一定帮助，所以也贴出来：<a href="http://theme-next.iissnan.com/" title="Next v5.1.4官方文档">Next v5.1.4官方文档</a></p><h1 id="效果展示及GitHub链接"><a href="#效果展示及GitHub链接" class="headerlink" title="效果展示及GitHub链接"></a>效果展示及GitHub链接</h1><p>我的个人博客网站链接：<a href="https://www.qinsouth.cn/">https://www.qinsouth.cn/</a><br>GitHub链接：<a href="https://github.com/qinsouth-575/qinsouth-575.github.io">https://github.com/qinsouth-575/qinsouth-575.github.io</a></p><h1 id="Hexo博客搭建"><a href="#Hexo博客搭建" class="headerlink" title="Hexo博客搭建"></a>Hexo博客搭建</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="第一步：安装Node-js"><a href="#第一步：安装Node-js" class="headerlink" title="第一步：安装Node.js"></a>第一步：安装Node.js</h3><p>详情请见本站相关文章：<a href="https://www.qinsouth.cn/2020/09/11/Node.js%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E9%85%8D%E7%BD%AE/" title="Node.js的安装及环境配配置">《Node.js的安装及环境配配置》</a>，若已安装，可直接跳过本步骤</p><h3 id="第二步：安装Git"><a href="#第二步：安装Git" class="headerlink" title="第二步：安装Git"></a>第二步：安装Git</h3><p>详情请见本站相关文章：<a href="https://www.qinsouth.cn/2020/09/18/Git%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85GitHub%E8%B4%A6%E5%8F%B7%E7%94%B3%E8%AF%B7%E5%8F%8A%E9%85%8D%E7%BD%AE/" title="Git下载安装GitHub账号申请及配置">《Git下载安装GitHub账号申请及配置》</a>，若已安装，可直接跳过本步骤</p><h3 id="第三步：创建GitHub仓库"><a href="#第三步：创建GitHub仓库" class="headerlink" title="第三步：创建GitHub仓库"></a>第三步：创建GitHub仓库</h3><h4 id="登录到GitHub"><a href="#登录到GitHub" class="headerlink" title="登录到GitHub"></a>登录到GitHub</h4><p>使用GitHub把个人博客部署到远端的公服上去，没有GitHub可以使用码云，或者创建GitHub账号都行<br>登录到GitHub，点击左侧的绿色按钮：Create repository或New进入创建仓库页面<br>如果你尚未创建并拥有第一个项目，则会显示Create repository按钮。</p><h4 id="创建一个新的GitHub仓库"><a href="#创建一个新的GitHub仓库" class="headerlink" title="创建一个新的GitHub仓库"></a>创建一个新的GitHub仓库</h4><p>用户部署个人博客的GitHub仓库的命名必须符合特定要求才行<br>Repository name 必须是 个人Github用户名.github.io 才行，描述随便写即可<br>我的仓库名显示不正确是因为已经创了一个同名的仓库，所以无法再创建<br><img src="">创建好之后暂时放在这里，等待Hexo安装好，将网址配置进Hexo的网站配置文件中<br>如我的GitHub博客仓库网址：<a href="https://github.com/qinsouth-575/qinsouth-575.github.io.git">https://github.com/qinsouth-575/qinsouth-575.github.io.git</a></p><h3 id="正式搭建"><a href="#正式搭建" class="headerlink" title="正式搭建"></a>正式搭建</h3><p>本文仍在编写中</p><h1 id="Next主题简单个性化"><a href="#Next主题简单个性化" class="headerlink" title="Next主题简单个性化"></a>Next主题简单个性化</h1><p>本文仍在编写中</p><h1 id="搭建个人博客的其他选择"><a href="#搭建个人博客的其他选择" class="headerlink" title="搭建个人博客的其他选择"></a><a name="else">搭建个人博客的其他选择</a></h1><h2 id="1-搭建动态博客"><a href="#1-搭建动态博客" class="headerlink" title="1.搭建动态博客"></a>1.搭建动态博客</h2><p>动态博客：有前台后端<br>后端可以用各种技术来写，php、Python、C#、Java等都可以  <br>CodeSheep的动态博客，是在学SpringBoot时练手做的，基于SpringBoot+thymeleaf+MySQL的<br>有后台可以管理，可以登录、注册、进行管理操作，类似于博客系统 CSDN、简书这些<br>灵活性比较高、功能更强一些，开发也更难，需要懂前后端，搭建好要找服务器部署，比较麻烦，难度比较高</p><h2 id="2-直接使用成熟的框架"><a href="#2-直接使用成熟的框架" class="headerlink" title="2.直接使用成熟的框架"></a>2.直接使用成熟的框架</h2><p>[WordPress](wordpress.org WordPress)（基于php实现）<br>动态的CMS系统（博客系统），开源的用来构建一个网站或博客的。使用比较简单。进入文档有详细的教程。 很大程度的自由div</p><h2 id="3-其他静态的博客框架"><a href="#3-其他静态的博客框架" class="headerlink" title="3.其他静态的博客框架"></a>3.其他静态的博客框架</h2><p>部署简单，功能简单，展示即可，都有官方文档可参考</p><ol><li>[jekyllrb](jekyllrb.com jekyllrb) </li><li>[Hugo](gohugo.org Hugo) Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署</li><li>[VuePress](vuepress.vuejs.org VuePress) Vue驱动的静态网站生成器</li><li>[Solo](solo.b3log.org Solo) 一款小而美的Java博客系统，专为程序员设计</li></ol><h1 id="后记-感谢"><a href="#后记-感谢" class="headerlink" title="后记 - 感谢"></a>后记 - 感谢</h1><p>到这里关于Hexo博客搭建、搭配Next主题简单个性化等的内容全部讲完<br>感谢你的观看，希望对你有所帮助！<br>尊重知识产权-以下是本文参考文档链接，感谢几位作者！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Hexo是基于JavaScript的静态博客框架，是当下最流行的博客框架之一。Hexo有非常大的用户群体，其本身的插件和主题资源也非常丰富，同时作为静态博客也比较轻量、好上手、功能也简单一些。&lt;br&gt;我个人认为使用Hexo是初试博客搭建的最好选择。&lt;/p&gt;</summary>
    
    
    
    <category term="Hexo" scheme="http://www.qinsouth.cn/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://www.qinsouth.cn/tags/Hexo/"/>
    
    <category term="个人博客" scheme="http://www.qinsouth.cn/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Git下载安装GitHub账号申请及配置</title>
    <link href="http://www.qinsouth.cn/2020/09/18/Git%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85GitHub%E8%B4%A6%E5%8F%B7%E7%94%B3%E8%AF%B7%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.qinsouth.cn/2020/09/18/Git%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85GitHub%E8%B4%A6%E5%8F%B7%E7%94%B3%E8%AF%B7%E5%8F%8A%E9%85%8D%E7%BD%AE/</id>
    <published>2020-09-18T12:06:12.000Z</published>
    <updated>2020-09-19T16:11:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文是为准备搭建Hexo博客所单独发布的第二篇环境搭建博文，同时也是属于Git系列的文章。<br>正文中有关于Git的简单介绍、详细的搭建流程、GitHub注册及两者后续配置等，希望能对你有所帮助！感谢观看。</p><a id="more"></a><p>Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。<br>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。<br>GitHub是基于Git的代码库托管站。<br>Git的作用就是对文件进行版本管理，方便在不同版本进行切换修改，类似文件分不同时间备份让后需要时找回其中一份代替，不过更方便使用。</p><h1 id="下载Git安装程序"><a href="#下载Git安装程序" class="headerlink" title="下载Git安装程序"></a>下载Git安装程序</h1><p><a href="https://git-scm.com/" title="Git下载网站">Git下载网站</a>（国外网站，可确保为最新版本）<br>点击Download会跳转新的页面，也会同时开始下载，此时不用进行其他操作，等待下载完成即可<br><img src="http://qinsouth.cn/git_i_c/2%E4%B8%8B%E8%BD%BDGit%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F.png" alt="下载Git安装程序" title="下载Git安装程序"></p><h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><p>Git 2.28.0 Setup - Git2.28中文安装教程</p><h2 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h2><p>下载完成后，双击下载好的软件开始安装，出现如下对话框，点击Next&gt;<br><img src="http://qinsouth.cn/git_i_c/3anzhuang1.png" alt="安装-1" title="安装-1"></p><h2 id="选择安装位置"><a href="#选择安装位置" class="headerlink" title="选择安装位置"></a>选择安装位置</h2><p><img src="http://qinsouth.cn/git_i_c/4anzhuang2.png" alt="安装-2" title="安装-2"></p><h2 id="选择组件"><a href="#选择组件" class="headerlink" title="选择组件"></a>选择组件</h2><p>默认选项和图中不一样，建议按照图中修改：<br>建议选中第二大项(共三项)，Git Bash Here和Git GUI Here可以方便的在任意目录下打开git，选中这三项后Additional icons-&gt;On the Desktop（是否添加图标到桌面）就按照自己心情了<br><img src="http://qinsouth.cn/git_i_c/5anzhuang3.png" alt="安装-3" title="安装-3"></p><h2 id="创建开始菜单目录"><a href="#创建开始菜单目录" class="headerlink" title="创建开始菜单目录"></a>创建开始菜单目录</h2><p><img src="http://qinsouth.cn/git_i_c/6anzhuang4.png" alt="安装-4" title="安装-4"></p><h2 id="选择Git使用的默认编辑器"><a href="#选择Git使用的默认编辑器" class="headerlink" title="选择Git使用的默认编辑器"></a>选择Git使用的默认编辑器</h2><p><img src="http://qinsouth.cn/git_i_c/7anzhuang5.png" alt="安装-5" title="安装-5">点击下拉框，还有多种选择，以下为前四种翻译（注意点开下拉框后的滚动条，最上面还有一条选择）：</p><ol><li>Use the Nano editor by default  </li><li>Use Vim (The ubiquitous text editor) as Git’s default editor  </li><li>Use Notepad++ as Git’s default editor </li><li>Use Visual Studio Code as Git’s default editor </li></ol><p>翻译：</p><ol><li>默认使用 Nano 编辑器</li><li>使用 Vim 作为 Git 的默认编辑器</li><li>使用 Notepad++ 作为 Git 的默认编辑器 </li><li>使用 Visual Studio Code 作为 Git 的默认编辑器 </li></ol><p>我没有选择其他的，直接默认了。</p><h2 id="配置PATH环境"><a href="#配置PATH环境" class="headerlink" title="配置PATH环境"></a>配置PATH环境</h2><p><img src="http://qinsouth.cn/git_i_c/8anzhuang6.png" alt="安装-6" title="安装-6"><strong>选项1：Use Git from Git Bash only</strong><br><strong>只通过Git Bash使用Git</strong><br>This is the most cautious choice as your PATH will not be modified at all.You will only be able to use the Git command line tools form Git Bash.<br>这是最安全的选择，因为您的PATH根本不会被修改。您只能使用 Git Bash 的 Git 命令行工具。<br><strong>选项2：Git from the command line and also from 3rd-party software</strong><br><strong>Git来自命令行，也来自第三方软件（图中翻译略有不顺）</strong><br>(Recommended)This option adds only some minimal Git wrappers to your PATH to avoid cluttering your environment with option Unix tools.<br>You will be able to use Git from Git Bash,the Command Prompt and the Windows PowerShell as well as any third-party software looking for Git in PATH.<br>(推荐)此选项仅向路径添加一些最小的Git包装器，以避免使用Unix工具使环境混乱。<br>您将能够从Git Bash、命令提示符和Windows PowerShell以及任何在PATH中寻找Git的第三方软件中使用Git。<br><strong>选项3：Use Git and optional Unix tools from the Windows Command Prompt</strong><br><strong>通过Windows命令行使用Git和可选的Unix工具</strong><br>Both Git and the optional Unix tools will be added to you PATH.<br>Git和可选的Unix工具都将添加到您计算机的 PATH 中。<br>Warning:This will override Windows tools like “find and sort”.Only use this option if you understand the implications.<br>警告：这将覆盖Windows工具，如 “ find 和 sort ”。只有在了解其含义后才使用此选项。</p><h2 id="选择HTTPS传输后端"><a href="#选择HTTPS传输后端" class="headerlink" title="选择HTTPS传输后端"></a>选择HTTPS传输后端</h2><p><img src="http://qinsouth.cn/git_i_c/9anzhuang7.png" alt="安装-7" title="安装-7"></p><h2 id="配置行结束转换"><a href="#配置行结束转换" class="headerlink" title="配置行结束转换"></a>配置行结束转换</h2><p><img src="http://qinsouth.cn/git_i_c/10anzhuang8.png" alt="安装-8" title="安装-8"><strong>选项1：Checkout Windows-style,commit Unix-style line endings</strong><br><strong>签出Windows样式，提交unix样式的行结束</strong><br>Git will convert LF to CRLF when checking out text files.When committing text files,CRLF will be converted to LF .For cross-pltform projects,this is the recommended setting on Windows (“core.autocrlf” is set to “true”)<br>在检出文本文件时，Git会将LF转换为CRLF。当提交文本文件时，CRLF将转换为LF。 对于跨平台项目，这是Windows上推荐的设置(“core.autocrlf”设置为”true”) .<br><strong>选项2：Checkout as-is , commit Unix-style line endings</strong><br><strong>按原样签出，提交unix样式的行结束</strong><br>Git will not perform any conversion when checking out text files. When committing text files, CRLF will be converted to LF. For cross-platform projects,this is the recommended setting on Unix (“core.autocrlf” is set to “input”) .<br>在检出文本文件时，Git不会执行任何转换。 提交文本文件时，CRLF将转换为LF。 对于跨平台项目，这是Unix上的推荐设置 (“core.autocrlf”设置为”input”)<br><strong>选项3：Checkout as-is,commit as-is</strong><br><strong>按原样结账，提交按原样</strong><br>Git will not perform any conversions when checking out or committing text files.Choosing this option is not recommended for cross-platform projects (“core.autocrlf”is set to “false”) .<br>在检出或提交文本文件时，Git不会执行任何转换。对于跨平台项目，不推荐使用此选项(“core.autocrlf”设置为”false”)</p><h2 id="配置终端模拟器以与Git-Bash一起使用"><a href="#配置终端模拟器以与Git-Bash一起使用" class="headerlink" title="配置终端模拟器以与Git Bash一起使用"></a>配置终端模拟器以与Git Bash一起使用</h2><p><img src="http://qinsouth.cn/git_i_c/11anzhuang9.png" alt="安装-9" title="安装-9"><strong>选项1：Use MinTTY (the default terminal of MSYS2)</strong><br><strong>使用MinTTY(MSYS2的默认终端)</strong><br>Git Bash will use MinTTY as terminal emulator,which sports a resizable window,non-rectangular selections and a Unicode font. Windows console programs (such as interactive Python) must be launched via ‘winpty’ to work in MinTTY.<br>Git Bash将使用MinTTY作为终端模拟器，该模拟器具有可调整大小的窗口，非矩形选区和Unicode字体。 Windows控制台程序(如交互式Python)必须通过’winpty’启动才能在MinTTY中运行。<br><strong>选项2：Use Windows’ default console window</strong><br><strong>使用Windows的默认控制台窗口</strong><br>Git will use the default console window of Windows (“cmd.exe”),which works well with Win32 console programs such as interactive Python or node.js , but has a very limited default scroll-back,needs to be configured to use aUnicode font in order to display non-ASCII characters correctly,and prior to Windows 10 its windows was not freely resizable and it only allowed rectangular text selections.<br>Git将使用Windows的默认控制台窗口(“cmd.exe”)，该窗口可以与Win32控制台程序(如交互式Python或node.js)一起使用，但默认的回滚非常有限，需要配置为使用unicode 字体以正确显示非ASCII字符，并且在Windows 10之前，其窗口不能自由调整大小，并且只允许矩形文本选择。</p><h2 id="选择默认的”git-pull”行为"><a href="#选择默认的”git-pull”行为" class="headerlink" title="选择默认的”git pull”行为"></a>选择默认的”git pull”行为</h2><p><img src="http://qinsouth.cn/git_i_c/12anzhuang10.png" alt="安装-10" title="安装-10"></p><h2 id="选择一个有证书的助手"><a href="#选择一个有证书的助手" class="headerlink" title="选择一个有证书的助手"></a>选择一个有证书的助手</h2><p><img src="http://qinsouth.cn/git_i_c/13anzhuang11.png" alt="安装-11" title="安装-11"></p><h2 id="配置额外的选项"><a href="#配置额外的选项" class="headerlink" title="配置额外的选项"></a>配置额外的选项</h2><p><img src="http://qinsouth.cn/git_i_c/14anzhuang12.png" alt="安装-12" title="安装-12"></p><h2 id="实验配置选项"><a href="#实验配置选项" class="headerlink" title="实验配置选项"></a>实验配置选项</h2><p><img src="http://qinsouth.cn/git_i_c/15anzhuang13.png" alt="安装-13" title="安装-13"></p><h2 id="完成Git设置向导（完成安装）"><a href="#完成Git设置向导（完成安装）" class="headerlink" title="完成Git设置向导（完成安装）"></a>完成Git设置向导（完成安装）</h2><p><img src="http://qinsouth.cn/git_i_c/16anzhuang14.png" alt="安装-14" title="安装-14">在开始菜单里点击”Git Bash”，弹出命令行窗口，就说明Git安装成功！<br>以及，在任意目录下右击，可以看到右键菜单中有”Git GUI Here”和”Git Bash Here”两个选项，如下图。<br>在我的个人博客右键点击”Git Bash Here”选项，命令行窗口截图如下：<br><img src="http://qinsouth.cn/git_i_c/17%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95.png" alt="右键菜单" title="右键菜单"><img src="http://qinsouth.cn/git_i_c/18Git%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%95%8C%E9%9D%A2.png" alt="Git命令行界面" title="Git命令行界面"></p><h2 id="查看更新前后版本号"><a href="#查看更新前后版本号" class="headerlink" title="查看更新前后版本号"></a>查看更新前后版本号</h2><p>更新前打开Windows命令行查看了当时版本，安装新版结束后又查看一次(前面命令敲错了,哈哈)，截图并贴出来<br><img src="http://qinsouth.cn/git_i_c/19cmd%E6%9F%A5%E7%9C%8BGit%E7%89%88%E6%9C%AC.png" alt="cmd查看Git版本" title="cmd查看Git版本">Git 2.28.0 安装过程就写到这里了。</p><h1 id="账号申请"><a href="#账号申请" class="headerlink" title="账号申请"></a>账号申请</h1><p>安装完成后需要设置自己的GitHub账号和邮箱，否则无法正确使用（此步骤为第四大点）<br>如果目前还没有申请账号，则如以下步骤，先进行账号申请</p><h2 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h2><p>进入<a href="https://github.com/" title="账号申请网址">账号申请网址</a> ，出现如下界面：（未登录时会自动进入注册选项卡，若已有账号记得切换到“登录”）<br><img src="http://qinsouth.cn/git_i_c/20GitHub%E6%B3%A8%E5%86%8C.png" alt="GitHub注册" title="GitHub注册">输入自己想要的账户名，自己的邮箱和密码，账户名只能包含字母和数字字符或者是单个连字符“-”并且连字符不可以作为开头或者结尾；密码中至少包含一个字母，一个数字，并且长度不小于7个字符。<br>输入完成后后点击“Sign up for Github”。</p><h2 id="验证是人为操作"><a href="#验证是人为操作" class="headerlink" title="验证是人为操作"></a>验证是人为操作</h2><p>这里的验证不一定是图中这个，总会慢慢改变验证方式，按照要求进行即可，都很简单的<br><img src="http://qinsouth.cn/git_i_c/21%E6%B3%A8%E5%86%8C%E5%90%8E%E9%AA%8C%E8%AF%81.png" alt="注册后验证" title="注册后验证"></p><h2 id="选择兴趣"><a href="#选择兴趣" class="headerlink" title="选择兴趣"></a>选择兴趣</h2><p>选择你的兴趣和学习目的，这会方便github给你推荐对应的资讯或提示，这里我也选了几个<br><img src="http://qinsouth.cn/git_i_c/22%E9%80%89%E6%8B%A9%E6%84%9F%E5%85%B4%E8%B6%A3%E7%9A%84.png" alt="选择感兴趣的" title="选择感兴趣的"></p><h2 id="验证邮箱"><a href="#验证邮箱" class="headerlink" title="验证邮箱"></a>验证邮箱</h2><p>github发送一条邮件到你邮箱，注意查收，点击蓝色按钮验证即可。<br><img src="http://qinsouth.cn/git_i_c/23%E5%8E%BB%E9%82%AE%E7%AE%B1%E5%AE%8C%E6%88%90%E9%AA%8C%E8%AF%81.png" alt="去邮箱进行验证" title="去邮箱进行验证"><img src="http://qinsouth.cn/git_i_c/24%E7%82%B9%E5%87%BB%E5%AE%8C%E6%88%90%E9%AA%8C%E8%AF%81.png" alt="点击完成验证" title="点击完成验证">到这里你的GitHub账号即创建完毕了，页面显示的内容如“创建项目”、“建立组织”、“开始学习”等可跳过，你可以自行学习或在以后的开发中慢慢摸索。</p><h1 id="后续设置"><a href="#后续设置" class="headerlink" title="后续设置"></a>后续设置</h1><h2 id="设置用户名及邮箱"><a href="#设置用户名及邮箱" class="headerlink" title="设置用户名及邮箱"></a>设置用户名及邮箱</h2><p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的GitHub用户名和Email地址<br>账号申请完成后，打开命令行或者Git Bash，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name YourGitHubUserName</span><br><span class="line">git config --global user.email YourEmail</span><br></pre></td></tr></table></figure><p>其中YourGitHubUserName和YourEmail替换成上面注册时的账户名和邮箱<br>命令行下输入和Git Bash下输入均可，然后分别回车即可<br>我就不在命令行展示这两条命令，上面这个GitHub账号是为了截图展示特意创建的，邮箱也是新申请的。<br>所以我直接将自己原本的GitHub账号及邮箱设置后的，通过这条命令显示一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --list</span><br></pre></td></tr></table></figure><p><img src="http://qinsouth.cn/git_i_c/25%E6%9F%A5%E7%9C%8B%E7%94%A8%E6%88%B7%E5%90%8D%E5%8F%8A%E9%82%AE%E7%AE%B1%E8%AE%BE%E7%BD%AE.png" alt="查看用户名及邮箱设置" title="查看用户名及邮箱设置"></p><h2 id="配置sshkey"><a href="#配置sshkey" class="headerlink" title="配置sshkey"></a>配置sshkey</h2><p>好处：每次提代码都不要输入用户名和密码。</p><h3 id="生成ssh"><a href="#生成ssh" class="headerlink" title="生成ssh"></a>生成ssh</h3><p>命令行或Git Bash中输入以下命令，注意两边双引号是需要的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;YourEmail&quot;</span><br></pre></td></tr></table></figure><p>然后连敲三次回车键，以下为产生结果（截图展示最好将邮箱隐藏）<br><img src="http://qinsouth.cn/git_i_c/26%E7%94%9F%E6%88%90ssh%E5%AF%86%E9%92%A5.png" alt="生成ssh密钥" title="生成ssh密钥">结束后去系统盘目录下（一般在 C:\Users\你的用户名.ssh）(mac: /Users/用户/.ssh）查看是否有ssh文件夹生成，此文件夹中以下两个文件<br><img src="http://qinsouth.cn/git_i_c/27%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E7%94%9F%E6%88%90.png" alt="查看文件生成" title="查看文件生成">将ssh文件夹中的公钥（第二个文件： id_rsa.pub）打开，全选内容并复制<br>接下来按下面的步骤添加到GitHub账号的ssh设置中</p><h3 id="设置ssh密钥"><a href="#设置ssh密钥" class="headerlink" title="设置ssh密钥"></a>设置ssh密钥</h3><p>在GitHub的个人账户的设置中找到对应界面<br><img src="http://qinsouth.cn/git_i_c/28%E5%8E%BB%E8%AE%BE%E7%BD%AEssh1.png" alt="去设置ssh-1" title="去设置ssh-1">title随便起一个，将公钥（ id_rsa.pub）文件中内容复制粘贴到key中，然后点击Ass SSH key就好啦<br><img src="http://qinsouth.cn/git_i_c/29%E5%8E%BB%E8%AE%BE%E7%BD%AEssh2.png" alt="去设置ssh-2" title="去设置ssh-2"></p><h3 id="测试配置结果"><a href="#测试配置结果" class="headerlink" title="测试配置结果"></a>测试配置结果</h3><p>测试一下配置是否成功，在Git Bush命令框（刚才配置账号和邮箱的命令框）中继续输入以下命令，回车</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>检查是否连接到github，注意要再确认时输入yes再回车<br><img src="http://qinsouth.cn/git_i_c/30%E6%A3%80%E6%B5%8B%E9%85%8D%E7%BD%AE%E7%BB%93%E6%9E%9C.png" alt="检查配置结果" title="检查配置结果">连接成功示例：<br>Hi qinsouth-575! You’ve successfully authenticated, but GitHub does not provide shell access.<br>你好，秦南575！您已经成功地进行了身份验证，但是GitHub不提供shell访问。</p><h1 id="后记-感谢"><a href="#后记-感谢" class="headerlink" title="后记 - 感谢"></a>后记 - 感谢</h1><p>到这里关于Git下载安装、GitHub账号申请、后续配置等的内容全部讲完<br>感谢你的观看，希望对你有所帮助！<br>尊重知识产权-以下是本文参考文档链接，感谢三位作者！<br>CSDN-san兄弟：<a href="https://blog.csdn.net/sanxd/article/details/82624127" title="Git下载安装及设置详细教程">Git下载安装及设置详细教程</a><br>CSDN-Petrus1021：<a href="https://blog.csdn.net/sishen47k/article/details/80211002" title="git中文安装教程">git中文安装教程</a><br>CSDN-ots_luo：<a href="https://blog.csdn.net/weixin_45738527/article/details/105146064" title="注册github账号详细中文版教程【精选】">注册github账号详细中文版教程【精选】</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文是为准备搭建Hexo博客所单独发布的第二篇环境搭建博文，同时也是属于Git系列的文章。&lt;br&gt;正文中有关于Git的简单介绍、详细的搭建流程、GitHub注册及两者后续配置等，希望能对你有所帮助！感谢观看。&lt;/p&gt;</summary>
    
    
    
    <category term="Git" scheme="http://www.qinsouth.cn/categories/Git/"/>
    
    
    <category term="Git" scheme="http://www.qinsouth.cn/tags/Git/"/>
    
    <category term="GitHub" scheme="http://www.qinsouth.cn/tags/GitHub/"/>
    
    <category term="环境搭建" scheme="http://www.qinsouth.cn/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    <category term="Hexo" scheme="http://www.qinsouth.cn/tags/Hexo/"/>
    
    <category term="个人博客" scheme="http://www.qinsouth.cn/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Node.js的安装及环境配置</title>
    <link href="http://www.qinsouth.cn/2020/09/12/Node.js%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.qinsouth.cn/2020/09/12/Node.js%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</id>
    <published>2020-09-12T14:07:31.000Z</published>
    <updated>2020-09-12T17:01:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文是为准备搭建Hexo博客所单独发布的第一篇环境搭建博文，同时也是属于Node系列的文章。<br>正文中有关于Node.js的简单介绍、详细的搭建流程以及npm部分常用命令，希望能对你有所帮助！感谢观看。<br>搭建个人博客者请注意，Hexo博客官方建议： Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本。</p><a id="more"></a><p>简单的说 Node.js 就是运行在服务端的 JavaScript。Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。</p><h1 id="下载Node-js"><a href="#下载Node-js" class="headerlink" title="下载Node.js"></a>下载Node.js</h1><p><a href="https://nodejs.org/en/" title="Node.js官网-下载地址">Node.js官网-下载地址</a><br><img src="http://qinsouth.cn/Node.js/1%E8%BF%9B%E5%85%A5node%E5%AE%98%E7%BD%91.png" alt="进入Node官网" title="进入Node官网"><br>我电脑的是当前发布版最新版v14.13.0，都可以的；<br>这里会自动匹配你电脑的系统给到推荐下载的版本，点击即开始下载，也可点击下方“其他下载”自行选择。</p><h1 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h1><p>①下载完成后，双击安装程序，开始安装Node.js<br>②点击勾选，接受，再点击next<br>③安装路径默认在C:\Program Files下面，建议点击【change】修改到D盘或其他盘，然后点击next<br>④基本选择默认，然后next<br><img src="http://qinsouth.cn/Node.js/2%E5%AE%89%E8%A3%85%E7%95%8C%E9%9D%A21.png" alt="Node安装界面-1" title="Node安装界面-1"><br>⑤如下图框中所示，不选，点击next<br><img src="http://qinsouth.cn/Node.js/3%E5%AE%89%E8%A3%85%E7%95%8C%E9%9D%A22.png" alt="Node安装界面-2" title="Node安装界面-2"><br>⑥点击Install，进行安装<br>⑦点击finish，完成安装<br>更新新的node版本时只需下载新版本的安装本重走一遍安装程序即可完成。</p><h1 id="查看版本号，验证安装成功"><a href="#查看版本号，验证安装成功" class="headerlink" title="查看版本号，验证安装成功"></a>查看版本号，验证安装成功</h1><p>win+R输入cmd（管理员权限键入），如图所示标识安装成功：<br><img src="http://qinsouth.cn/Node.js/4cmd%E6%9F%A5%E7%9C%8Bnode%E7%89%88%E6%9C%AC.png" alt="cmd查看node版本" title="cmd查看node版本"><br>新版的Node.js已自带npm，安装Node.js时会一起安装，npm的作用就是对Node.js依赖的包进行管理，也可以理解为用来安装/卸载Node.js需要装的东西。</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>这里的环境配置主要配置的是npm安装的全局模块所在的路径以及缓存cache的路径。<br>默认情况下，我们在执行【npm install XXXX -g】安装模块时（可选参数-g，g代表global全局安装的意思），下载的模板，一个全局包，这个包的默认存放路径为【C:\Users\用户名\AppData\Roaming\npm\node_modules】下，这样会占据C盘空间，可以通过CMD指令【npm root -g】查看。<br><img src="http://qinsouth.cn/Node.js/5cmd%E6%9F%A5%E7%9C%8B%E5%8C%85%E9%BB%98%E8%AE%A4%E5%AD%98%E6%94%BE%E4%BD%8D%E7%BD%AE.png" alt="cmd查看包默认存放位置" title="cmd查看包默认存放位置"><br>我希望将全模块所在路径和缓存路径放在我node.js安装的文件夹中，则在我安装的文件夹【E:\nodejs】下创建两个文件夹【node_global】及【node_cache】如下图：<br><img src="http://qinsouth.cn/Node.js/6%E6%B7%BB%E5%8A%A0%E6%96%87%E4%BB%B6%E5%A4%B9.png" alt="添加文件夹" title="添加文件夹"><br>创建完两个空文件夹之后，打开cmd命令窗口，输入以下两条指令，注意路径要用你的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;E:\nodejs\node_global&quot;</span></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;E:\nodejs\node_cache&quot;</span></span><br></pre></td></tr></table></figure><p><img src="http://qinsouth.cn/Node.js/7%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85%E5%85%A8%E5%B1%80%E6%A8%A1%E5%9D%97%E5%8F%8A%E7%BC%93%E5%AD%98%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E8%B7%AF%E5%BE%84.png" alt="配置安装全局模块及缓存文件夹的路径" title="配置安装全局模块及缓存文件夹的路径">npm config list 这条指令可在配置好环境变量后再输入查看 ↓↓↓<br>接下来设置环境变量，关闭cmd窗口，“我的电脑”-右键-“属性”-“高级系统设置”-“高级”-“环境变量”<br><img src="http://qinsouth.cn/Node.js/8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE1.png" alt="配置环境变量1" title="配置环境变量1">进入环境变量对话框，在【系统变量】下新建【NODE_PATH】，输入【E:\nodejs\node_global\node_modules】<br><img src="http://qinsouth.cn/Node.js/9%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE2.png" alt="配置环境变量2" title="配置环境变量2">将【用户变量】下的【Path】修改为【E:\nodejs\node_global】<br><img src="http://qinsouth.cn/Node.js/10%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE3.png" alt="配置环境变量3" title="配置环境变量3"><br><img src="http://qinsouth.cn/Node.js/11%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE4.png" alt="配置环境变量4" title="配置环境变量4"></p><h1 id="npm部分常用命令"><a href="#npm部分常用命令" class="headerlink" title="npm部分常用命令"></a>npm部分常用命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">• npm -v：查看npm安装的版本。</span><br><span class="line">• npm init：会引导你创建一个package.json文件，包括名称、版本、作者等信息。</span><br><span class="line">• npm list：查看当前目录下已安装的node包。</span><br><span class="line">• npm ls：查看当前目录下已安装的node包。</span><br><span class="line">• npm install moduleNames：安装Node模块到本地目录node_modules下。</span><br><span class="line">• npm install &lt; name &gt; -g：将包安装到全局环境中。</span><br><span class="line">• npm install &lt; name &gt; --save：安装的同时，将信息写入package.json中，项目路径中如果有package.json文件时，直接使用npm install方法就可以根据dependencies配置安装所有的依赖包，这样代码提交到git时，就不用提交node_modules这个文件夹了。</span><br><span class="line">• npm install &lt; name&gt; --save-dev：安装的同时，将信息写入package.json中项目路径中如果有package.json文件时，直接使用npm install方法就可以根据devDependencies配置安装所有的依赖包，这样代码提交到git时，就不用提交node_modules这个文件夹了。</span><br><span class="line">• npm uninstall moudleName：卸载node模块。</span><br></pre></td></tr></table></figure><h1 id="配置淘宝镜像"><a href="#配置淘宝镜像" class="headerlink" title="配置淘宝镜像"></a>配置淘宝镜像</h1><p>通过npm安装模块时都是去国外的镜像下载的，但是有的时候由于网络等原因导致安装模块失败，好在阿里有团队维护国内镜像<a href="https://developer.aliyun.com/mirror/NPM?from=tnpm" title="淘宝NPM镜像">淘宝NPM镜像</a>，上面有使用说明，大家可自行查看。<br><img src="http://qinsouth.cn/Node.js/12%E6%B7%98%E5%AE%9D%E9%95%9C%E5%83%8F%E6%88%AA%E5%9B%BE1.png" alt="淘宝镜像截图1" title="添加淘宝镜像截图1"><br><img src="http://qinsouth.cn/Node.js/13%E6%B7%98%E5%AE%9D%E9%95%9C%E5%83%8F%E6%88%AA%E5%9B%BE2.png" alt="淘宝镜像截图2" title="淘宝镜像截图2"></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>配置完成后，安装个module测试下，我们就安装最常用的express模块，打开cmd窗口，输入如下命令进行模块的全局安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express -g    //-g是全局安装的意思</span><br></pre></td></tr></table></figure><h1 id="后记-感谢"><a href="#后记-感谢" class="headerlink" title="后记 - 感谢"></a>后记 - 感谢</h1><p>到这里关于Node.js的安装、环境配配置等的内容全部讲完<br>感谢你的观看，希望对你有所帮助！<br>尊重知识产权-以下是本文参考文档链接，感谢两位作者！<br>博客园-刘奇云：<a href="https://www.cnblogs.com/liuqiyun/p/8133904.html" title="Node.js安装及环境配置之Windows篇">Node.js安装及环境配置之Windows篇</a><br>CSDN-huangfuyk：<a href="https://blog.csdn.net/weixin_42881768/article/details/105028164" title="Node.js的安装及环境配置【超详细】">Node.js的安装及环境配置【超详细】</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文是为准备搭建Hexo博客所单独发布的第一篇环境搭建博文，同时也是属于Node系列的文章。&lt;br&gt;正文中有关于Node.js的简单介绍、详细的搭建流程以及npm部分常用命令，希望能对你有所帮助！感谢观看。&lt;br&gt;搭建个人博客者请注意，Hexo博客官方建议： Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本。&lt;/p&gt;</summary>
    
    
    
    <category term="Node.js" scheme="http://www.qinsouth.cn/categories/Node-js/"/>
    
    
    <category term="环境搭建" scheme="http://www.qinsouth.cn/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    <category term="Hexo" scheme="http://www.qinsouth.cn/tags/Hexo/"/>
    
    <category term="个人博客" scheme="http://www.qinsouth.cn/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="Node.js" scheme="http://www.qinsouth.cn/tags/Node-js/"/>
    
    <category term="npm" scheme="http://www.qinsouth.cn/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>技术博客必须写！如何写？</title>
    <link href="http://www.qinsouth.cn/2020/09/11/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%E5%BF%85%E9%A1%BB%E5%86%99%EF%BC%81%E5%A6%82%E4%BD%95%E5%86%99%EF%BC%9F/"/>
    <id>http://www.qinsouth.cn/2020/09/11/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%E5%BF%85%E9%A1%BB%E5%86%99%EF%BC%81%E5%A6%82%E4%BD%95%E5%86%99%EF%BC%9F/</id>
    <published>2020-09-11T14:07:31.000Z</published>
    <updated>2020-09-11T17:01:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>拥有自己的个人博客并坚持撰写技术博文是一件百利而无一害的事！<br>个人博客可以系统地整合自己某一阶段的学习成果、加深对技术点的理解（写的过程=复现），让你有一张“自己的知识清单”，是自己很好的备忘录+踩坑记录，并且能提高自己的写作水平，结交志同道合的朋友。同时，也是面试的绝对加分项。<strong>（贵在坚持）</strong></p><a id="more"></a><h2 id="写博客的一些误区"><a href="#写博客的一些误区" class="headerlink" title="写博客的一些误区"></a>写博客的一些误区</h2><h3 id="初学者写博客没技术含量怎么办"><a href="#初学者写博客没技术含量怎么办" class="headerlink" title="初学者写博客没技术含量怎么办"></a>初学者写博客没技术含量怎么办</h3><p>一位作者在自己所出书籍的前言写到几个经历<br>①作为面试官时常会问对方会不会自己写技术博客，发现其实所有人都知道写博客的重要性，但动手的很少<br>②自己曾遇到一个无头绪的问题，在搜索解决办法时看到一篇博文，刚好解决了自己问题，而观察这位作者其他的博文，大部分都是基础知识点及踩坑记录，但也正是这样一位作者，解决了自己的问题，那么这位作者的博客、博文就是最自己有帮助有意义的，就算不是因为这一点，也不会因为其其他写的东西很基础而有什么看法，对方做的是对自己及他人都有帮助的事<br>so，所需要注意的就是写</p><h3 id="初学者写博客会不会被人家喷"><a href="#初学者写博客会不会被人家喷" class="headerlink" title="初学者写博客会不会被人家喷"></a>初学者写博客会不会被人家喷</h3><p>被喷很正常，但只要是客观公正，写出来的东西可复现，对别人能带来一定的价值或参考，就是有意义的！<br>写博客的平台：<br>自建平台、掘金、SF、简书、CSDN、博客园等都可以<br>自建平台：部署到GitHub、gitee、服务器、自己买个域名，都可以</p><h2 id="写技术博客的态度"><a href="#写技术博客的态度" class="headerlink" title="写技术博客的态度"></a>写技术博客的态度</h2><ol><li>内容为王，尤其技术博客，内容沉淀为主</li><li>多坚持一会儿</li><li>对技术博客保留敬畏之心，尊重知识产权</li><li>一定要可复现，一切不能复现的文章都是耍流氓</li></ol><h2 id="技术博客如何写"><a href="#技术博客如何写" class="headerlink" title="技术博客如何写"></a>技术博客如何写</h2><ol><li>格式的建议，写作的形式建议用markdown格式（markdown一种特殊的标记语法）</li><li>内容的建议：写入门系列，备忘录、笔记、基础理解、踩坑记录等<pre><code>     写实战类文章，环境搭建、操作记录等     环境搭建：JDK、Node安装、个人博客搭建等等，写清楚可实现，就有价值</code></pre></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;拥有自己的个人博客并坚持撰写技术博文是一件百利而无一害的事！&lt;br&gt;个人博客可以系统地整合自己某一阶段的学习成果、加深对技术点的理解（写的过程=复现），让你有一张“自己的知识清单”，是自己很好的备忘录+踩坑记录，并且能提高自己的写作水平，结交志同道合的朋友。同时，也是面试的绝对加分项。&lt;strong&gt;（贵在坚持）&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="study" scheme="http://www.qinsouth.cn/categories/study/"/>
    
    
    <category term="个人博客" scheme="http://www.qinsouth.cn/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="study" scheme="http://www.qinsouth.cn/tags/study/"/>
    
    <category term="CodeSheep" scheme="http://www.qinsouth.cn/tags/CodeSheep/"/>
    
  </entry>
  
  <entry>
    <title>如何学好技术以及快速掌握一门新技术</title>
    <link href="http://www.qinsouth.cn/2020/09/07/%E5%A6%82%E4%BD%95%E5%AD%A6%E5%A5%BD%E6%8A%80%E6%9C%AF%E4%BB%A5%E5%8F%8A%E5%BF%AB%E9%80%9F%E6%8E%8C%E6%8F%A1%E4%B8%80%E9%97%A8%E6%96%B0%E6%8A%80%E6%9C%AF/"/>
    <id>http://www.qinsouth.cn/2020/09/07/%E5%A6%82%E4%BD%95%E5%AD%A6%E5%A5%BD%E6%8A%80%E6%9C%AF%E4%BB%A5%E5%8F%8A%E5%BF%AB%E9%80%9F%E6%8E%8C%E6%8F%A1%E4%B8%80%E9%97%A8%E6%96%B0%E6%8A%80%E6%9C%AF/</id>
    <published>2020-09-07T14:11:21.000Z</published>
    <updated>2020-09-07T15:41:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>通常来说，学习没有捷径！所谓快速学习的窍门，也是基于认真刻苦。<br>这里提供一些<a href="https://space.bilibili.com/384068749/video" title="CodeSheep">作者CodeSheep</a>在学习技术的角度自己的心得：学习步骤、心态等等。</p><a id="more"></a><p>如何学一门技术？快速掌握一门技术！这种认知性的这种经验，没有办法进行复制，最终的执行力效果还是因人而异的。</p><h3 id="认知-了解阶段（第一印象很重要）"><a href="#认知-了解阶段（第一印象很重要）" class="headerlink" title="认知 了解阶段（第一印象很重要）"></a>认知 了解阶段（第一印象很重要）</h3><p>主要是掌握概念和方向(对某个技术点的第一印象非常重要，因为人总有一种先入为主的潜意识)<br>1.了解该技术的百科定义 - 以Spring Boot为例   典型的Web后端框架<br>2.该技术解决了什么问题 - 驱动网站的后端，后端请求发到服务器其的响应<br>3.摸清同类技术有哪些 - Web后端常用同类技术框架：Spring Boot(Java)/beego(Go)/flask、django(Python)/thinkphp(PHP)。开阔眼界，认清这一层级有哪些技术栈<br>4.了解该技术的主要组成部分 - Spring：IOC容器、AOP切面<br>5.思考该技术为什么会出现 - 有了SpringMVC为什么还会出现SpringBoot呢</p><h3 id="学语法、学用法"><a href="#学语法、学用法" class="headerlink" title="学语法、学用法"></a>学语法、学用法</h3><p>途径1：视频教程（效率低）（看视频是被动的，学技术阅读文本的能力很重要）<br>途径2：快速上手视频（快速Demo搭建）<br>途径3：看别人写的入门博客<br>途径4（建议）：买书看（优先权威点的书籍）（好书如砖）<br>途径5：看官方文档（学习框架时）（硬着头皮看）（学语言，书籍；框架，官方文档）<br>过程中：多思考、多提炼、多总结、写写博客<br>作者希望通过频道视频来逐渐阐述一种知识体系和学习方法</p><h3 id="局部练习、小型实战、环境搭建"><a href="#局部练习、小型实战、环境搭建" class="headerlink" title="局部练习、小型实战、环境搭建"></a>局部练习、小型实战、环境搭建</h3><p>内容如标题，可自行理解<br>小建议：遇到坑及时记录，多思考、多提炼、多总结、写博客、写博客、写博客。</p><h3 id="上手实际项目或开源项目"><a href="#上手实际项目或开源项目" class="headerlink" title="上手实际项目或开源项目"></a>上手实际项目或开源项目</h3><p>最高级、最高效、最能学到东西的一种学习方式<br>前提：语言及框架基础要牢固，网络编程知识要牢固，数据结构也要牢固一些。</p><h3 id="造轮子、手撸源码"><a href="#造轮子、手撸源码" class="headerlink" title="造轮子、手撸源码"></a>造轮子、手撸源码</h3><p>出一些源码阅读的视频/文章，深度的博客，GitHub开源项目。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;通常来说，学习没有捷径！所谓快速学习的窍门，也是基于认真刻苦。&lt;br&gt;这里提供一些&lt;a href=&quot;https://space.bilibili.com/384068749/video&quot; title=&quot;CodeSheep&quot;&gt;作者CodeSheep&lt;/a&gt;在学习技术的角度自己的心得：学习步骤、心态等等。&lt;/p&gt;</summary>
    
    
    
    <category term="study" scheme="http://www.qinsouth.cn/categories/study/"/>
    
    
    <category term="study" scheme="http://www.qinsouth.cn/tags/study/"/>
    
    <category term="CodeSheep" scheme="http://www.qinsouth.cn/tags/CodeSheep/"/>
    
  </entry>
  
  <entry>
    <title>Hello World!</title>
    <link href="http://www.qinsouth.cn/2020/09/06/hello-world/"/>
    <id>http://www.qinsouth.cn/2020/09/06/hello-world/</id>
    <published>2020-09-06T14:11:21.000Z</published>
    <updated>2020-09-06T15:41:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="study" scheme="http://www.qinsouth.cn/categories/study/"/>
    
    
    <category term="study" scheme="http://www.qinsouth.cn/tags/study/"/>
    
  </entry>
  
</feed>
